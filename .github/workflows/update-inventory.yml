name: Update Inventory Data

on:
  schedule:
    - cron: '0 */2 * * *'  # Run every 2 hours
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm install googleapis dotenv
        
      - name: Create fix-inventory.js script
        run: |
          cat > fix-inventory.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const { google } = require('googleapis');

          async function authorize() {
            try {
              const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);
              const auth = new google.auth.JWT(
                credentials.client_email,
                null,
                credentials.private_key,
                ['https://www.googleapis.com/auth/spreadsheets.readonly']
              );
              
              await auth.authorize();
              console.log('Google Sheets API authentication successful');
              return auth;
            } catch (error) {
              console.error('Error authenticating with Google Sheets API:', error);
              throw error;
            }
          }

          async function fetchInventoryData() {
            try {
              const auth = await authorize();
              const sheets = google.sheets({ version: 'v4', auth });
              
              const response = await sheets.spreadsheets.values.get({
                spreadsheetId: process.env.SHEET_ID,
                range: process.env.SHEET_NAME
              });
              
              const rows = response.data.values;
              
              if (!rows || rows.length === 0) {
                console.log('No data found in the spreadsheet.');
                return [];
              }
              
              const headers = rows[0];
              const data = rows.slice(1).map(row => {
                const item = {};
                headers.forEach((header, index) => {
                  item[header] = row[index] || '';
                });
                return item;
              });
              
              console.log(`Fetched ${data.length} rows from Google Sheets`);
              return data;
            } catch (error) {
              console.error('Error fetching data from Google Sheets:', error);
              throw error;
            }
          }

          async function fixInventoryData() {
            try {
              console.log('Fetching data from Google Sheets...');
              const rawData = await fetchInventoryData();
              console.log(`Fetched ${rawData.length} rows from Google Sheets`);
              
              // Group data by product+variant+sku
              const productMap = new Map();
              
              rawData.forEach(row => {
                const key = `${row['Product Title']}|${row['Variant Title']}|${row['SKU']}`;
                
                if (!productMap.has(key)) {
                  productMap.set(key, {
                    sku: row['SKU'] || '',
                    productTitle: row['Product Title'] || '',
                    productType: row['Product Type'] || '',
                    variantTitle: row['Variant Title'] || '',
                    imageUrl: row['Image URL'] || '',
                    locations: []
                  });
                }
                
                // Skip if this isn't a location row
                if (!row['Location ID']) return;
                
                // Each row represents a product at a specific location
                const locationId = row['Location ID'];
                
                // Add location data
                let location = {
                  locationId: locationId,
                  onHand: parseInt(row['On Hand'] || '0'),
                  threshold: parseInt(row['Threshold'] || '5'),
                  incoming: parseInt(row['Incoming'] || '0'),
                  incomingDate: row['Incoming Date'] || ''
                };
                
                // Add location to product
                productMap.get(key).locations.push(location);
              });
              
              // Convert product map to array
              const inventoryData = Array.from(productMap.values()).map(product => {
                // Ensure both locations exist for each product
                const elMonte = product.locations.find(loc => loc.locationId === 'gid://shopify/Location/68455891180');
                const whittier = product.locations.find(loc => loc.locationId === 'gid://shopify/Location/71820017900');
                
                // Create default locations if they don't exist
                const locations = [];
                
                if (elMonte) {
                  locations.push(elMonte);
                } else {
                  locations.push({
                    locationId: 'gid://shopify/Location/68455891180',
                    onHand: 0,
                    threshold: 5,
                    incoming: 0,
                    incomingDate: ''
                  });
                }
                
                if (whittier) {
                  locations.push(whittier);
                } else {
                  locations.push({
                    locationId: 'gid://shopify/Location/71820017900',
                    onHand: 0,
                    threshold: 5,
                    incoming: 0,
                    incomingDate: ''
                  });
                }
                
                // Replace locations with standardized version
                product.locations = locations;
                return product;
              });
              
              // Create data directory if it doesn't exist
              const dataDir = path.join(process.cwd(), 'data');
              if (!fs.existsSync(dataDir)) {
                fs.mkdirSync(dataDir);
              }
              
              // Write the data to inventory.json
              fs.writeFileSync(
                path.join(dataDir, 'inventory.json'),
                JSON.stringify(inventoryData, null, 2)
              );
              
              console.log(`Successfully created inventory.json with ${inventoryData.length} products!`);
            } catch (error) {
              console.error('Error fixing inventory data:', error);
              process.exit(1);
            }
          }

          // Run the function
          fixInventoryData();
          EOL
          
      - name: Fetch inventory data
        run: node fix-inventory.js
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          SHEET_ID: ${{ secrets.SHEET_ID }}
          SHEET_NAME: ${{ secrets.SHEET_NAME }}
          
      - name: Commit and push if changed
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add data/inventory.json
          git diff --quiet && git diff --staged --quiet || git commit -m "Update inventory data"
          git push 